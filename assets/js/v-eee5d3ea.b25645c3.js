"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[581],{5600:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-eee5d3ea",path:"/notes/JS%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.html",title:"JS宏任务和微任务",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是宏任务、微任务？",slug:"什么是宏任务、微任务",children:[]},{level:2,title:"每个宏任务对应了一个微任务队列",slug:"每个宏任务对应了一个微任务队列",children:[]},{level:2,title:"全局的同步代码是特殊的宏任务",slug:"全局的同步代码是特殊的宏任务",children:[]},{level:2,title:"宏任务和微任务执行机制",slug:"宏任务和微任务执行机制",children:[]},{level:2,title:"看个栗子",slug:"看个栗子",children:[]}],filePathRelative:"notes/JS宏任务和微任务.md",git:{updatedTime:1634883982e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},524:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="js宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#js宏任务和微任务" aria-hidden="true">#</a> JS宏任务和微任务</h1><h2 id="什么是宏任务、微任务" tabindex="-1"><a class="header-anchor" href="#什么是宏任务、微任务" aria-hidden="true">#</a> 什么是宏任务、微任务？</h2><p>首先，宏任务、微任务必须是异步执行的回调函数，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span>getList<span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>宏任务：</p><ul><li>整体代码script</li><li>用户交互事件(如鼠标点击、滚动页面、鼠标移入等)</li><li>常用的定时器(如setTimeout和setIterval)</li><li>网络请求、文件读写完成事件</li></ul><p>微任务：</p><ul><li>原生Promise</li><li>MutationObserver</li></ul><p>宏任务和微任务就分为上面几类，记住就行了</p><h2 id="每个宏任务对应了一个微任务队列" tabindex="-1"><a class="header-anchor" href="#每个宏任务对应了一个微任务队列" aria-hidden="true">#</a> 每个宏任务对应了一个微任务队列</h2><p>每一个宏任务，都对应了一个微任务队列，没什么特别的，你现在知道了这点，而且知道了哪些是宏任务和微任务</p><h2 id="全局的同步代码是特殊的宏任务" tabindex="-1"><a class="header-anchor" href="#全局的同步代码是特殊的宏任务" aria-hidden="true">#</a> 全局的同步代码是特殊的宏任务</h2><p>全局的同步执行代码，也要看成一个宏任务，那这个宏任务，也对应了他的微任务队列</p><h2 id="宏任务和微任务执行机制" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务执行机制" aria-hidden="true">#</a> 宏任务和微任务执行机制</h2><p>整个页面的系统调度可以看成一个for循环：</p><ul><li>首先执行全局的同步代码</li><li>执行完全局的同步代码后读取全局同步代码对应的微任务队列并且执行</li><li>执行完微任务队列，再继续执行需要执行的宏任务</li><li>执行完宏任务再执行对应的微任务队列</li><li>然后继续循环执行需要执行的宏任务...</li></ul><p>用一张图来讲解就是： <img src="https://i.loli.net/2021/10/22/p1KBzQPUcI9yf3q.png"></p><h2 id="看个栗子" tabindex="-1"><a class="header-anchor" href="#看个栗子" aria-hidden="true">#</a> 看个栗子</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>首先执行整个script的同步代码，碰到console.log(1)和console.log(2)输出1，2</li><li>然后执行宏任务对应的微任务队列Promise.resolve().then...输出3</li><li>之后再回去执行宏任务setTimeout输出4</li></ul><p>所以结果是1，2，3，4</p>',21),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);