"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[912],{4022:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5621efd1",path:"/notes/Note09ES6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html",title:"ES6之对象的扩展",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"属性的简洁表示",slug:"属性的简洁表示",children:[]},{level:2,title:"属性名表达式",slug:"属性名表达式",children:[]},{level:2,title:"方法的name属性",slug:"方法的name属性",children:[]},{level:2,title:"Object.getOwnPropertyDescriptor()",slug:"object-getownpropertydescriptor",children:[]},{level:2,title:"super关键字",slug:"super关键字",children:[]},{level:2,title:"对象的扩展运算符",slug:"对象的扩展运算符",children:[]}],filePathRelative:"notes/Note09ES6对象的扩展.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},314:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="es6之对象的扩展" tabindex="-1"><a class="header-anchor" href="#es6之对象的扩展" aria-hidden="true">#</a> ES6之对象的扩展</h1><h2 id="属性的简洁表示" tabindex="-1"><a class="header-anchor" href="#属性的简洁表示" aria-hidden="true">#</a> 属性的简洁表示</h2><ul><li>ES6允许函数对属性和方法进行简写<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//obj = {foo: &quot;bar&quot;, sayHi: function(){}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="属性名表达式" tabindex="-1"><a class="header-anchor" href="#属性名表达式" aria-hidden="true">#</a> 属性名表达式</h2><ul><li>ES6允许对象使用字面量定义对象时(使用大括号)，把表达式放方括号里作为对象的属性名或者方法名<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;h&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>abc<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="方法的name属性" tabindex="-1"><a class="header-anchor" href="#方法的name属性" aria-hidden="true">#</a> 方法的name属性</h2><ul><li>对象的方法也是函数，因此也有name属性<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sayName<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//&quot;sayName&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="object-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptor" aria-hidden="true">#</a> Object.getOwnPropertyDescriptor()</h2><ul><li>Object.getOwnPropertyDescriptor()方法用来获取某个属性的描述对象，描述对象用来控制该属性的行为<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">//  {</span>\n<span class="token comment">//    value: 123,</span>\n<span class="token comment">//    writable: true,</span>\n<span class="token comment">//    enumerable: true,</span>\n<span class="token comment">//    configurable: true</span>\n<span class="token comment">//  } */</span>\n<span class="token comment">// enumerable称为可枚举性</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><h2 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字" aria-hidden="true">#</a> super关键字</h2><ul><li>super关键字指向当前对象的原型对象<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>    \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h2 id="对象的扩展运算符" tabindex="-1"><a class="header-anchor" href="#对象的扩展运算符" aria-hidden="true">#</a> 对象的扩展运算符</h2><ul><li><p>对象也可以使用扩展运算符(...)</p></li><li><p>解构赋值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nx <span class="token comment">// 1</span>\ny <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment">// { a: 3, b: 4 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>对象的扩展运算符可以用于拷贝对象的所有可遍历属性到当前对象中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span>\nobj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">// obj1{a: 1, b: 2}, obj2{a: 3, b: 2}</span>\n<span class="token comment">// 等同于 let obj2 = Object.assign({}, obj1)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul>',13),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);