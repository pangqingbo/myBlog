"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[573],{650:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-49519a02",path:"/notes/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.html",title:"回调地狱",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是回调地狱",slug:"什么是回调地狱",children:[]},{level:2,title:"怎么解决回调地狱",slug:"怎么解决回调地狱",children:[]}],filePathRelative:"notes/回调地狱.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},9953:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="回调地狱" tabindex="-1"><a class="header-anchor" href="#回调地狱" aria-hidden="true">#</a> 回调地狱</h1><h2 id="什么是回调地狱" tabindex="-1"><a class="header-anchor" href="#什么是回调地狱" aria-hidden="true">#</a> 什么是回调地狱</h2><ul><li><p>举个栗子，看下面的代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1s后输出111，再然后过2s输出222，再然后过3s输出333</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>\n            <span class="token comment">/* 异步代码... */</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>简单来说，像上面这样在异步js中，回调函数一层套一层，甚至可能继续套更多层异步代码的现象就叫做回调地狱</p></li></ul><h2 id="怎么解决回调地狱" tabindex="-1"><a class="header-anchor" href="#怎么解决回调地狱" aria-hidden="true">#</a> 怎么解决回调地狱</h2>',4),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);