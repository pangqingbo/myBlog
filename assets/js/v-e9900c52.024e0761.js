"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[362],{5945:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-e9900c52",path:"/notes/Note07ES6%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.html",title:"ES6之数值的扩展",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"二进制和八进制表示法",slug:"二进制和八进制表示法",children:[]},{level:2,title:"数值分隔符",slug:"数值分隔符",children:[]},{level:2,title:"Number.isFinite()、Number.isNaN()",slug:"number-isfinite-、number-isnan",children:[]},{level:2,title:"Number.parseInt()、Number.parseFloat()",slug:"number-parseint-、number-parsefloat",children:[]},{level:2,title:"Number.isInteger()",slug:"number-isinteger",children:[]},{level:2,title:"Number.EPSILON",slug:"number-epsilon",children:[]},{level:2,title:"安全整数和 Number.isSafeInteger()",slug:"安全整数和-number-issafeinteger",children:[]},{level:2,title:"Math对象的扩展",slug:"math对象的扩展",children:[]},{level:2,title:"BigInt",slug:"bigint",children:[]}],filePathRelative:"notes/Note07ES6数值的扩展.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},4413:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="es6之数值的扩展" tabindex="-1"><a class="header-anchor" href="#es6之数值的扩展" aria-hidden="true">#</a> ES6之数值的扩展</h1><h2 id="二进制和八进制表示法" tabindex="-1"><a class="header-anchor" href="#二进制和八进制表示法" aria-hidden="true">#</a> 二进制和八进制表示法</h2><ul><li>ES6提供了二进制和八进制的新写法，分别用前缀0b（或0B）和0o（或0O）表示</li></ul><h2 id="数值分隔符" tabindex="-1"><a class="header-anchor" href="#数值分隔符" aria-hidden="true">#</a> 数值分隔符</h2><ul><li>ES2021，允许 JavaScript 的数值使用下划线（_）作为分隔符</li><li>这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">123_00</span> <span class="token operator">===</span> <span class="token number">12_300</span> <span class="token comment">// true</span>\n<span class="token number">12345_00</span> <span class="token operator">===</span> <span class="token number">123_4500</span> <span class="token comment">// true</span>\n<span class="token number">12345_00</span> <span class="token operator">===</span> <span class="token number">1_234_500</span> <span class="token comment">// true</span>\n<span class="token comment">// 小数</span>\n <span class="token number">0.000_001</span>\n<span class="token comment">// 科学计数法</span>\n <span class="token number">1e10_000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>下面三个将字符串转成数值的函数，不支持数值分隔符 <ul><li>Number()</li><li>parseInt()</li><li>parseFloat()</li></ul></li></ul><h2 id="number-isfinite-、number-isnan" tabindex="-1"><a class="header-anchor" href="#number-isfinite-、number-isnan" aria-hidden="true">#</a> Number.isFinite()、Number.isNaN()</h2><ul><li>Number.isFinite()用来检查一个数值是否为有限的，Number.isNaN()用来检查一个值是否为NaN</li><li>Number.isFinite()和Number.isNaN()在参数类型不是数值和NaN时，都会一律返回false</li></ul><h2 id="number-parseint-、number-parsefloat" tabindex="-1"><a class="header-anchor" href="#number-parseint-、number-parsefloat" aria-hidden="true">#</a> Number.parseInt()、Number.parseFloat()</h2><ul><li>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变</li></ul><h2 id="number-isinteger" tabindex="-1"><a class="header-anchor" href="#number-isinteger" aria-hidden="true">#</a> Number.isInteger()</h2><ul><li>Number.isInteger()用来判断一个数值是否为整数</li><li>如果参数不是数值，Number.isInteger返回false</li><li>如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数</li></ul><h2 id="number-epsilon" tabindex="-1"><a class="header-anchor" href="#number-epsilon" aria-hidden="true">#</a> Number.EPSILON</h2><ul><li>ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差，也就是2 的 -52 次方</li><li>引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">withinErrorMargin</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span> <span class="token comment">// false</span>\n<span class="token function">withinErrorMargin</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="安全整数和-number-issafeinteger" tabindex="-1"><a class="header-anchor" href="#安全整数和-number-issafeinteger" aria-hidden="true">#</a> 安全整数和 Number.isSafeInteger()</h2><ul><li><p>JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），一个数超出这个范围，那么这个数就是不精确的，ES6 引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token comment">// true</span>\nNumber<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token number">9007199254740991</span>\n<span class="token comment">// true</span>\n\nNumber<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token operator">-</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>\n<span class="token comment">// true</span>\nNumber<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">9007199254740991</span>\n<span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内</p></li></ul><h2 id="math对象的扩展" tabindex="-1"><a class="header-anchor" href="#math对象的扩展" aria-hidden="true">#</a> Math对象的扩展</h2><ul><li><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分</p></li><li><p>Math.sign方法用来判断一个数到底是正数、负数、还是零，它会返回以下五种值</p><ul><li>参数为正数，返回+1</li><li>参数为负数，返回-1</li><li>参数为 0，返回0</li><li>参数为-0，返回-0</li><li>其他值，返回NaN</li></ul></li><li><p>Math.cbrt()方法用于计算一个数的立方根(开三次方)</p></li><li><p>Math.clz32()方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0，对于小数，Math.clz32方法只考虑整数部分</p></li><li><p>以上几个方法如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN</p></li><li><p>Math.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">imul</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 8</span>\nMath<span class="token punctuation">.</span><span class="token function">imul</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment">// -8</span>\nMath<span class="token punctuation">.</span><span class="token function">imul</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>Math.fround方法返回一个数的32位单精度浮点数形式</p></li><li><p>Math.hypot方法返回所有参数的平方和的平方根</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Math.expm1(x)返回 e的x次方 - 1，即Math.exp(x) - 1</p></li><li><p>Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)，如果x小于-1，返回NaN</p></li><li><p>Math.log10(x)返回以 10 为底的x的对数，如果x小于 0，则返回 NaN</p></li><li><p>Math.log2(x)返回以 2 为底的x的对数，如果x小于 0，则返回 NaN</p></li></ul><h2 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h2><ul><li><p>新数据类型，BigInt用来精确表示任意位数的整数，用后缀n和number区分</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> bInt <span class="token operator">=</span> <span class="token number">123n</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bInt<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>es6还提供了BigInt函数，将非BigInt类型转为BigInt类型，转换规则和Number()一致,没有参数或者参数无法转换为正常数值或是小数都会报错</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">//123n</span>\nresult <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//error</span>\nresult <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//error</span>\nresult <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;123n&#39;</span><span class="token punctuation">)</span> <span class="token comment">//error</span>\nresult <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span> <span class="token comment">//error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul>',22),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);