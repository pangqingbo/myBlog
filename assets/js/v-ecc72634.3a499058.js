"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[240],{5524:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ecc72634",path:"/notes/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%EF%BC%9F%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%97%AD%E5%8C%85%EF%BC%9F.html",title:"闭包",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是闭包",slug:"什么是闭包",children:[]},{level:2,title:"我们为什么需要闭包",slug:"我们为什么需要闭包",children:[]}],filePathRelative:"notes/什么是闭包？我们为什么需要闭包？.md",git:{updatedTime:1634728633e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:4}]}}},9679:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(6252);const e=(0,p.uE)('<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><h2 id="什么是闭包" tabindex="-1"><a class="header-anchor" href="#什么是闭包" aria-hidden="true">#</a> 什么是闭包</h2><ul><li>闭包其实很简单，像下面的代码一样，函数fun和函数内部能访问到的变量lives就组成了一个<strong>闭包</strong><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//函数内部能访问到的变量lives</span>\n    <span class="token keyword">var</span> lives <span class="token operator">=</span> <span class="token number">100</span>\n    <span class="token comment">//函数fun</span>\n    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//函数fun和函数内部能访问到的变量lives就组成了闭包</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lives<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> fun \n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h2 id="我们为什么需要闭包" tabindex="-1"><a class="header-anchor" href="#我们为什么需要闭包" aria-hidden="true">#</a> 我们为什么需要闭包</h2><ul><li><p>闭包通常用来隐藏一个变量</p></li><li><p>比如，我们在做一个游戏，在写其中还剩几条命的代码，如果不用闭包，我们会直接写一个全局变量</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>lives <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">// 还有三十条命</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>我们当然可以像上面这样写，但是这样写很不安全，同时还会污染全局作用域，我们可能不小心就把这个值改了，或者一些怀有恶意的人通过全局就能轻易访问和修改这个数据</p></li><li><p>这个时候我们就需要一个用到闭包，将这个变量写成局部变量，同时通过一个访问器(函数)暴露这个变量,像下面这样</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 通过！ ~ - +可以自动执行这个匿名函数,类似于立即执行函数</span>\n<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token keyword">var</span> lives <span class="token operator">=</span> <span class="token number">50</span>\n\n  window<span class="token punctuation">.</span><span class="token function-variable function">award</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    lives <span class="token operator">+=</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n\n  window<span class="token punctuation">.</span><span class="token function-variable function">die</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    lives <span class="token operator">-=</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>这样我们就可以在全局通过award()或者die()来访问到lives</p></li></ul>',5),t=(0,p.Uk)("本文来源："),l={href:"https://zhuanlan.zhihu.com/p/22486908",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("https://zhuanlan.zhihu.com/p/22486908"),o={},r=(0,a(3744).Z)(o,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",l,[c,(0,p.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);