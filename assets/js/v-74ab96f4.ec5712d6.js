"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[683],{907:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-74ab96f4",path:"/notes/Note03ES6%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95.html",title:"ES6之数组的方法扩展",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"JavaScript中的数组方法",slug:"javascript中的数组方法",children:[]},{level:2,title:"es6数组扩展",slug:"es6数组扩展",children:[{level:3,title:"扩展运算符",slug:"扩展运算符",children:[]},{level:3,title:"Array.from()",slug:"array-from",children:[]},{level:3,title:"Array.of()",slug:"array-of",children:[]},{level:3,title:"copyWithin()",slug:"copywithin",children:[]},{level:3,title:"find()和findIndex()",slug:"find-和findindex",children:[]},{level:3,title:"fill()",slug:"fill",children:[]},{level:3,title:"entries(),keys(),values()",slug:"entries-keys-values",children:[]},{level:3,title:"includes()",slug:"includes",children:[]},{level:3,title:"flat()和flatMap()",slug:"flat-和flatmap",children:[]}]},{level:2,title:"知识点: in运算符",slug:"知识点-in运算符",children:[]}],filePathRelative:"notes/Note03ES6数组的方法.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},6799:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="es6之数组的方法扩展" tabindex="-1"><a class="header-anchor" href="#es6之数组的方法扩展" aria-hidden="true">#</a> ES6之数组的方法扩展</h1><h2 id="javascript中的数组方法" tabindex="-1"><a class="header-anchor" href="#javascript中的数组方法" aria-hidden="true">#</a> JavaScript中的数组方法</h2><ul><li><p>map()：对数组的每一个元素依次进行处理，并返回一个新数组，新数组中的元素为数组元素调用回调函数处理后的值，不改变原数组，有返回值</p><ul><li>语法：Array.map(function(value, index, arr){...},thisValue)</li><li>参数： <ol><li>回调函数：数组中的每一个值都会执行该函数</li><li>thisValue：指定函数的“this”值</li></ol></li></ul></li><li><p>forEach()：forEach和map类似，只不过map有返回值，forEach没有返回值</p></li><li><p>indexOf()：indexOf方法无法识别数组的NaN成员</p></li><li><p>every()：针对数组中的每一个元素进行比对，只要有一个元素比对结果为false则返回false，反之要所有的元素比对结果为true才为true</p></li><li><p>some()：同样是针对数组中的每一个元素，但是这个方法是，只要有一个元素比对结果为true，返回结果就为true，反之要所有的元素比对结果为false才为false</p></li><li><p>sort()：对数组进行排序，默认按照Unicode编码升序排序，不过我们可以通过添加函数参数来改变排序顺序，返回值为0或-1不交换位置，返回值为1交换位置</p><ul><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span>value2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">if</span><span class="token punctuation">(</span>value1<span class="token operator">&lt;</span>value2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value1<span class="token operator">&gt;</span>value2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\narr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//1,2,3,4,10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li><li><p>filter()：filter用于对数组进行过滤，它会创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，语法参数和map一样，不改变原数组</p></li><li><p>call()：该方法需要可以传递多个参数，第一个参数是目标对象，第二个及之后的参数将作为参数传入调用call方法的函数，这个函数将调用call方法的函数放在目标对象中执行</p></li><li><p>apply()：apply方法和call方法类似，不过apply第二个参数传递的是数组</p></li></ul><h2 id="es6数组扩展" tabindex="-1"><a class="header-anchor" href="#es6数组扩展" aria-hidden="true">#</a> es6数组扩展</h2><h3 id="扩展运算符" tabindex="-1"><a class="header-anchor" href="#扩展运算符" aria-hidden="true">#</a> 扩展运算符</h3><ul><li>扩展运算符（...）：扩展运算符可以将一个数组转为用逗号分隔的参数序列 <ul><li>注意： <ol><li>扩展运算符后面可以放表达式</li><li>扩展运算符后面是空数组，则不产生效果</li><li>只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错</li></ol></li><li>应用： <ol><li><p>替代函数的apply方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5 的写法  </span>\nMath<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  \n<span class="token comment">// ES6 的写法  </span>\nMath<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  \n<span class="token comment">// 等同于  </span>\nMath<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>复制数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token comment">// 写法一  </span>\n<span class="token keyword">const</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a1<span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token comment">// 写法二  </span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token operator">...</span>a2<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>合并数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token comment">// ES5 的合并数组  </span>\narr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]  </span>\n<span class="token comment">// ES6 的合并数组  </span>\n<span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">,</span> <span class="token operator">...</span>arr3<span class="token punctuation">]</span>\n<span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>与解构赋值结合</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \nfirst <span class="token comment">// 1  </span>\nrest  <span class="token comment">// [2, 3, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>将字符串转为数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span>  \n<span class="token comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>将实现了Iterator接口的类数组对象转为真正的数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>nodeList<span class="token punctuation">]</span><span class="token punctuation">;</span>  \n这个例子中nodeList就是一个实现了Iterator接口的类数组对象\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li></ul></li></ul><h3 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from()</h3><ul><li>Array.from()：用来将类数组对象和可遍历对象转为真正的数组，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换 <ul><li>参数： <ol><li>第一个参数是要转换的对象</li><li>可选，第二个参数需要传递一个回调函数，作用类似于map()</li><li>可选，第三个参数用来绑定this</li></ol></li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token comment">// [1, 4, 9]  </span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span> <span class="token comment">//[&#39;jack&#39;, &#39;jack&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h3 id="array-of" tabindex="-1"><a class="header-anchor" href="#array-of" aria-hidden="true">#</a> Array.of()</h3><ul><li>Array.of()：将一组值转换为数组 <ul><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// []  </span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [undefined]  </span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [1]  </span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2]  </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li></ul><h3 id="copywithin" tabindex="-1"><a class="header-anchor" href="#copywithin" aria-hidden="true">#</a> copyWithin()</h3><ul><li>copyWithin()：将指定位置的数组成员复制到其他位置（会覆盖原有成员），然后返回当前数组。使用这个方法会修改当前数组 <ul><li>语法：Array.prototype.copyWithin(target, start, end)</li><li>参数： <ol><li>target(必选)：从该位置开始替换数据。如果为负值，表示倒数</li><li>start(可选)：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算</li><li>end(可选)：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算</li><li>这三个参数都应该是数值，如果不是，会自动转为数值</li></ol></li><li>示例：<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]  \n[1, 2, 3, 4, 5].copyWithin(0, -2, -1) // [4, 2, 3, 4, 5]\n[].copyWithin.call({length: 5, 3: 1}, 0, 3) // {0: 1, 3: 1, length: 5}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h3 id="find-和findindex" tabindex="-1"><a class="header-anchor" href="#find-和findindex" aria-hidden="true">#</a> find()和findIndex()</h3><ul><li><p>find()：返回找到的第一个符合条件的数组成语，如果没找到则返回undefined</p><ul><li>语法：Array.find(function(value, index, arr){...},thisValue)</li><li>参数： <ol><li>function：回调函数，函数可以接受三个参数，依次为当前的值、当前的位置和原数组</li><li>thisValue：第二个参数用来绑定回调函数的this对象</li></ol></li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 26</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><p>findIndex()：与find方法类似，返回第一个符合条件的数组成员的位置，没找到则返回-1</p><ul><li><p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">&gt;</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n<span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>find和findIndex这两个方法都可以发现NaN，弥补了数组的indexOf方法的不足：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// -1  </span>\n<span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">y</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h3 id="fill" tabindex="-1"><a class="header-anchor" href="#fill" aria-hidden="true">#</a> fill()</h3><ul><li>fill()：fill方法使用给定值，填充一个数组 <ul><li>语法：Array.fill(value, start, end)</li><li>参数： <ol><li>value：用来填充数组的定值</li><li>start：填充的起始位置</li><li>end：该位置前结束填充</li></ol></li><li>示例：<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7, 1, 2) // [&#39;a&#39;, 7, &#39;c&#39;]  \n// 如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象  \nlet arr = new Array(3).fill({name: &quot;Mike&quot;});  \narr[0].name = &quot;Ben&quot;;  \narr // [{name: &quot;Ben&quot;}, {name: &quot;Ben&quot;}, {name: &quot;Ben&quot;}]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li></ul><h3 id="entries-keys-values" tabindex="-1"><a class="header-anchor" href="#entries-keys-values" aria-hidden="true">#</a> entries(),keys(),values()</h3><ul><li>entries(),keys(),values()：ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象，可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历 <ul><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n<span class="token comment">// 0  </span>\n<span class="token comment">// 1  </span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n<span class="token comment">// &#39;a&#39;  </span>\n<span class="token comment">// &#39;b&#39;  </span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n<span class="token comment">// 0 &quot;a&quot;  </span>\n<span class="token comment">// 1 &quot;b&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul></li></ul><h3 id="includes" tabindex="-1"><a class="header-anchor" href="#includes" aria-hidden="true">#</a> includes()</h3><ul><li>includes()：Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似 <ul><li>参数：该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false  </span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h3 id="flat-和flatmap" tabindex="-1"><a class="header-anchor" href="#flat-和flatmap" aria-hidden="true">#</a> flat()和flatMap()</h3><ul><li>flat()：Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响 <ul><li>参数：flat的参数表示要拉平的层数，默认为1</li><li>如果原数组有空位，flat()方法会跳过空位</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>flatMap()：flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组 <ul><li>flatMap()只能展开一层数组</li><li>flatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this</li></ul></li></ul><h2 id="知识点-in运算符" tabindex="-1"><a class="header-anchor" href="#知识点-in运算符" aria-hidden="true">#</a> 知识点: in运算符</h2><ul><li>如果指定的属性在指定的对象或其原型链中，则in 运算符返回true <ul><li>语法：prop in object</li><li>参数： <ol><li>prop：一个字符串类型或者 symbol 类型的属性名或者数组索引（非symbol类型将会强制转为字符串）</li><li>objectName：检查它（或其原型链）是否包含具有指定名称的属性的对象，必须是一个对象值</li></ol></li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 数组  </span>\n<span class="token keyword">var</span> trees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&quot;redwood&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bay&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cedar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oak&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;maple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token number">0</span> <span class="token keyword">in</span> trees        <span class="token comment">// 返回true  </span>\n<span class="token number">3</span> <span class="token keyword">in</span> trees        <span class="token comment">// 返回true  </span>\n<span class="token number">6</span> <span class="token keyword">in</span> trees        <span class="token comment">// 返回false  </span>\n<span class="token string">&quot;bay&quot;</span> <span class="token keyword">in</span> trees    <span class="token comment">// 返回false (必须使用索引号,而不是数组元素的值)</span>\n\n<span class="token string">&quot;length&quot;</span> <span class="token keyword">in</span> trees <span class="token comment">// 返回true (length是一个数组属性)</span>\n\nSymbol<span class="token punctuation">.</span>iterator <span class="token keyword">in</span> trees <span class="token comment">// 返回true (数组可迭代，只在ES2015+上有效)</span>\n\t\t\n<span class="token comment">// 内置对象  </span>\n<span class="token string">&quot;PI&quot;</span> <span class="token keyword">in</span> Math          <span class="token comment">// 返回true  </span>\n\n<span class="token comment">// 自定义对象  </span>\n<span class="token keyword">var</span> mycar <span class="token operator">=</span> <span class="token punctuation">{</span>make<span class="token operator">:</span> <span class="token string">&quot;Honda&quot;</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">&quot;Accord&quot;</span><span class="token punctuation">,</span> year<span class="token operator">:</span> <span class="token number">1998</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token string">&quot;make&quot;</span> <span class="token keyword">in</span> mycar  <span class="token comment">// 返回true  </span>\n<span class="token string">&quot;model&quot;</span> <span class="token keyword">in</span> mycar <span class="token comment">// 返回true  </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul></li></ul>',24),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);