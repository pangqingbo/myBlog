"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[265],{5312:(l,i,e)=>{e.r(i),e.d(i,{data:()=>a});const a={key:"v-c15e4688",path:"/notes/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",title:"JS数据类型及类型转换",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据类型",slug:"数据类型",children:[]},{level:2,title:"类型判断",slug:"类型判断",children:[]},{level:2,title:"类型转换",slug:"类型转换",children:[{level:3,title:"其他值转布尔(Boolean)",slug:"其他值转布尔-boolean",children:[]},{level:3,title:"其他值转数字(Number)",slug:"其他值转数字-number",children:[]},{level:3,title:"其他值转字符串(String)",slug:"其他值转字符串-string",children:[]}]}],filePathRelative:"notes/JS数据类型及类型转换.md",git:{updatedTime:1634726996e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:1}]}}},3850:(l,i,e)=>{e.r(i),e.d(i,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="js数据类型及类型转换" tabindex="-1"><a class="header-anchor" href="#js数据类型及类型转换" aria-hidden="true">#</a> JS数据类型及类型转换</h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>JS数据类型分为两大类共八种数据类型</p><ul><li>原始数据类型 <ul><li>Undefined</li><li>Symbol</li><li>String</li><li>Null</li><li>Number</li><li>Boolean</li><li>BigInt</li></ul></li><li>引用数据类型 <ul><li>Object</li></ul></li><li>记忆公式(USONB)</li></ul><h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2><ul><li>typeof</li><li>instanceof</li><li>Object.prototype.toString</li><li>isXXX，比如isArray</li><li>用相等操作符(==)比较null和undefined时null和undefined是相等的</li></ul><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><h3 id="其他值转布尔-boolean" tabindex="-1"><a class="header-anchor" href="#其他值转布尔-boolean" aria-hidden="true">#</a> 其他值转布尔(Boolean)</h3><ul><li><p>使用Boolean函数将其他类型转换为布尔类型</p></li><li><p>除了以下六种值，其余值都会转换为true：</p><ul><li>undefined</li><li>null</li><li>+0和-0</li><li>NaN</li><li>空串</li></ul></li></ul><h3 id="其他值转数字-number" tabindex="-1"><a class="header-anchor" href="#其他值转数字-number" aria-hidden="true">#</a> 其他值转数字(Number)</h3><h4 id="强制转换" tabindex="-1"><a class="header-anchor" href="#强制转换" aria-hidden="true">#</a> 强制转换</h4><ul><li>调用Number()函数 <ul><li>字符串的空串转为0</li><li>字符串包含任何非法的数字都会转为NaN</li><li>布尔值true转为1</li><li>布尔值false转为0</li><li>null转为0</li><li>undefined转为NaN</li></ul></li><li>调用parseInt()或parseFloat() <ul><li>这两个函数专门用来将字符串转为数字</li></ul></li></ul><h4 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a> 隐式转换</h4><ul><li>使用一元运算符+</li><li>转换规则和Number函数一样</li></ul><h3 id="其他值转字符串-string" tabindex="-1"><a class="header-anchor" href="#其他值转字符串-string" aria-hidden="true">#</a> 其他值转字符串(String)</h3><h4 id="强制转换-1" tabindex="-1"><a class="header-anchor" href="#强制转换-1" aria-hidden="true">#</a> 强制转换</h4><ul><li><p>调用toString()方法</p><ul><li>例如：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>null和undefined调用该方法会报错，因为这两种类型的数据没有该方法</li></ul></li><li><p>调用String()函数</p><ul><li>对于Number Boolean String会String函数会调用toString方法</li><li>null直接转换为&#39;null&#39;</li><li>undefined直接转换为&#39;undefined&#39;</li></ul></li></ul><h4 id="隐式转换-1" tabindex="-1"><a class="header-anchor" href="#隐式转换-1" aria-hidden="true">#</a> 隐式转换</h4><ul><li>数据+&#39;&#39; <ul><li>原理和String函数一样</li></ul></li></ul>',19),n={},r=(0,e(3744).Z)(n,[["render",function(l,i){return a}]])},3744:(l,i)=>{i.Z=(l,i)=>{const e=l.__vccOpts||l;for(const[l,a]of i)e[l]=a;return e}}}]);