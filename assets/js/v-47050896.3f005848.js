"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[402],{4894:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-47050896",path:"/notes/Note06Vue%E6%8C%87%E4%BB%A4.html",title:"Vue指令",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue指令",slug:"vue指令-1",children:[]}],filePathRelative:"notes/Note06Vue指令.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},297:(s,a,n)=>{n.r(a),n.d(a,{default:()=>o});const e=(0,n(6252).uE)('<h1 id="vue指令" tabindex="-1"><a class="header-anchor" href="#vue指令" aria-hidden="true">#</a> Vue指令</h1><h2 id="vue指令-1" tabindex="-1"><a class="header-anchor" href="#vue指令-1" aria-hidden="true">#</a> Vue指令</h2><ul><li>v-html：v-html的内容会按照HTML文本插入，而不会作为普通文本插入</li><li>v-show：根据表达式的真假值，切换元素是否显示，也就是切换元素的CSS display属性</li><li>v-if：这块内容只在表达式内容为真值(Boolean为真或其他类型转为Boolean为真)时才会渲染</li><li>v-else：表示v-if的else块</li><li>v-else-if：充当v-else的else-if块</li><li>v-for：用来遍历数组或者对象 <ul><li>语法示例：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span> <span class="token operator">=</span> <span class="token string">&quot;item in items&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> 或 <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span> <span class="token operator">=</span> <span class="token string">&quot;item of items&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>遍历数组时： <ul><li>语法：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span> <span class="token operator">=</span> <span class="token string">&quot;(item,index) of items&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>第一个参数表示当前的值</li><li>第二个参数指示数组索引</li></ul></li><li>遍历对象时： <ul><li>语法：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span> <span class="token operator">=</span> <span class="token string">&quot;(value,name,index) of obj&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>第一个参数表示对象的属性值</li><li>第二个参数为对象属性名</li><li>第三个参数用作索引</li></ul></li></ul></li><li>v-on：用来进行事件绑定，事件类型参数指定 <ul><li>简写：@</li><li>绑定单机响应事件：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>绑定keyup事件：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @keyup <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>事件修饰符： <ul><li>.stop：阻止事件继续冒泡或者捕获</li><li>.prevent：阻止事件默认行为</li><li>.capture：触发事件时添加了.capture的优先捕获事件</li><li>.self：以onclick事件为例，只有元素在点击自己时才会触发事件，就算点击的是元素包裹的子元素，事件也不会冒泡到元素上</li><li>.once：事件只会触发一次</li><li>.passive：</li></ul></li></ul></li></ul>',3),l={},o=(0,n(3744).Z)(l,[["render",function(s,a){return e}]])},3744:(s,a)=>{a.Z=(s,a)=>{const n=s.__vccOpts||s;for(const[s,e]of a)n[s]=e;return n}}}]);