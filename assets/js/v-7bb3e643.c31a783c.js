"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[432],{5677:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7bb3e643",path:"/notes/Note05ES6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95.html",title:"ES6之字符串的扩展",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"字符串的扩展",slug:"字符串的扩展",children:[{level:3,title:"模板字符串",slug:"模板字符串",children:[]},{level:3,title:"标签模板",slug:"标签模板",children:[]}]},{level:2,title:"字符串的新增方法",slug:"字符串的新增方法",children:[{level:3,title:"String.fromCodePoint()",slug:"string-fromcodepoint",children:[]},{level:3,title:"String.raw()",slug:"string-raw",children:[]},{level:3,title:"实例方法：codePointAt()",slug:"实例方法-codepointat",children:[]},{level:3,title:"实例方法：normalize()",slug:"实例方法-normalize",children:[]},{level:3,title:"实例方法：includes(), startsWith(), endsWith()",slug:"实例方法-includes-startswith-endswith",children:[]},{level:3,title:"实例方法：repeat()",slug:"实例方法-repeat",children:[]},{level:3,title:"实例方法：padStart()，padEnd()",slug:"实例方法-padstart-padend",children:[]},{level:3,title:"实例方法：trimStart()，trimEnd()",slug:"实例方法-trimstart-trimend",children:[]},{level:3,title:"实例方法：matchAll()",slug:"实例方法-matchall",children:[]},{level:3,title:"实例方法：replaceAll()",slug:"实例方法-replaceall",children:[]}]}],filePathRelative:"notes/Note05ES6字符串的扩展.md",git:{updatedTime:1634647134e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:2}]}}},1852:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="es6之字符串的扩展" tabindex="-1"><a class="header-anchor" href="#es6之字符串的扩展" aria-hidden="true">#</a> ES6之字符串的扩展</h1><h2 id="字符串的扩展" tabindex="-1"><a class="header-anchor" href="#字符串的扩展" aria-hidden="true">#</a> 字符串的扩展</h2><h3 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h3><ul><li><p>模板字符串用反引号（`）标识</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 多行字符串</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">In JavaScript this is\n not legal.</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>模板字符串中嵌入变量，需要将变量名写在${}之中，大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token string">&quot;today&quot;</span><span class="token punctuation">;</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, how are you </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>模板字符串之中还能调用函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bar</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// foo Hello World bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\`Yo\\` World!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>如果模板字符串中的变量没有声明，将报错</p></li></ul><h3 id="标签模板" tabindex="-1"><a class="header-anchor" href="#标签模板" aria-hidden="true">#</a> 标签模板</h3><ul><li><p>标签模板其实是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 等同于</span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>如果模板字符里面有变量，会将模板字符串先处理成多个参数，再调用函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\ntag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">+</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> world </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">*</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; world &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="字符串的新增方法" tabindex="-1"><a class="header-anchor" href="#字符串的新增方法" aria-hidden="true">#</a> 字符串的新增方法</h2><h3 id="string-fromcodepoint" tabindex="-1"><a class="header-anchor" href="#string-fromcodepoint" aria-hidden="true">#</a> String.fromCodePoint()</h3><ul><li>语法：String.fromCharCode(Unicode编码)</li><li>参数：需要转换的字符的Unicode编码</li><li>ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符，而ES6提供的String.fromCodePoint()方法可以识别大于0xFFFF的字符</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x20BB7</span><span class="token punctuation">)</span>\n<span class="token comment">// &quot;𠮷&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="string-raw" tabindex="-1"><a class="header-anchor" href="#string-raw" aria-hidden="true">#</a> String.raw()</h3><ul><li>ES6 还为原生的 String 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法</li><li>String.raw()方法会将模板字符串的所有变量替换，而且对斜杠进行转义</li></ul><h3 id="实例方法-codepointat" tabindex="-1"><a class="header-anchor" href="#实例方法-codepointat" aria-hidden="true">#</a> 实例方法：codePointAt()</h3><ul><li><p>codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的十进制码点,但也不能完美的返回，如下</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;𠮷a&#39;</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 134071</span>\ns<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 57271</span>\ns<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 97</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;𠮷&quot;</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 55362</span>\ns<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 57271</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>为了解决codePointAt的缺陷，有两种办法：</p><ol><li>使用for...of循环，因为它会正确识别 32 位的 UTF-16 字符</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;𠮷a&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 20bb7</span>\n<span class="token comment">// 61</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>使用扩展运算符（...）</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;𠮷a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr.length === 2</span>\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>\n  <span class="token parameter">ch</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 20bb7</span>\n<span class="token comment">// 61</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="实例方法-normalize" tabindex="-1"><a class="header-anchor" href="#实例方法-normalize" aria-hidden="true">#</a> 实例方法：normalize()</h3><ul><li>normalize()用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化</li><li>normalize方法目前不能识别三个或三个以上字符的合成<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;\\u01D1&#39;</span><span class="token operator">===</span><span class="token string">&#39;\\u004F\\u030C&#39;</span> <span class="token comment">//false</span>\n<span class="token string">&#39;\\u01D1&#39;</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;\\u004F\\u030C&#39;</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="实例方法-includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#实例方法-includes-startswith-endswith" aria-hidden="true">#</a> 实例方法：includes(), startsWith(), endsWith()</h3><ul><li>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中</li><li>ES6又提供了三种新方法来确定一个字符串是否包含在另一个字符串中</li><li>includes()：返回布尔值，表示是否找到了参数字符串</li><li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部</li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部</li><li>这三个方法都支持第二个参数，表示开始搜索的位置</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\ns<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\ns<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束</li></ul><h3 id="实例方法-repeat" tabindex="-1"><a class="header-anchor" href="#实例方法-repeat" aria-hidden="true">#</a> 实例方法：repeat()</h3><ul><li>repeat方法返回一个新字符串，表示将原字符串重复n次</li><li>参数如果是小数，会被取整</li><li>如果repeat的参数是负数或者Infinity，会报错</li><li>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算</li><li>参数NaN等同于 0</li><li>如果repeat的参数是字符串，则会先转换成数字</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &quot;xxx&quot;</span>\n<span class="token string">&#39;na&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span> <span class="token comment">// &quot;nana&quot;</span>\n<span class="token string">&#39;na&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// RangeError</span>\n<span class="token string">&#39;na&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// RangeError</span>\n<span class="token string">&#39;na&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;\t</span>\n<span class="token string">&#39;na&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;nanana&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="实例方法-padstart-padend" tabindex="-1"><a class="header-anchor" href="#实例方法-padstart-padend" aria-hidden="true">#</a> 实例方法：padStart()，padEnd()</h3><ul><li>ES2017引入padStart()用于头部补全，padEnd()用于尾部补全</li><li>padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串</li><li>如果省略第二个参数，默认使用空格补全长度</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ababx&#39;</span>\n<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abax&#39;</span>\n\n<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;xabab&#39;</span>\n<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;xaba&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h3 id="实例方法-trimstart-trimend" tabindex="-1"><a class="header-anchor" href="#实例方法-trimstart-trimend" aria-hidden="true">#</a> 实例方法：trimStart()，trimEnd()</h3><ul><li>trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格</li><li>它们返回的都是新字符串，不会修改原始字符串</li><li>trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名</li><li>示例：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">&#39;  abc  &#39;</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>\ns<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc  &quot;</span>\ns<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;  abc&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="实例方法-matchall" tabindex="-1"><a class="header-anchor" href="#实例方法-matchall" aria-hidden="true">#</a> 实例方法：matchAll()</h3><ul><li>matchAll()方法返回一个正则表达式在当前字符串的所有匹配</li></ul><h3 id="实例方法-replaceall" tabindex="-1"><a class="header-anchor" href="#实例方法-replaceall" aria-hidden="true">#</a> 实例方法：replaceAll()</h3><ul><li><p>replaceAll()方法，用来一次性替换所有匹配</p></li><li><p>它的用法与replace()相同，返回一个新字符串，不会改变原字符串</p></li><li><p>使用replaceAll时如果第一个参数是不带有g修饰符的正则表达式，则报错</p></li><li><p>replaceAll()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串，如下：</p><ol><li>$&amp;：匹配的字符串。</li><li>$` ：匹配结果前面的文本。</li><li>$&#39;：匹配结果后面的文本。</li><li>$n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li><li>$$：指代美元符号$。</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// $&amp; 表示匹配的字符串，即`b`本身</span>\n<span class="token comment">// 所以返回结果与原字符串一致</span>\n<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$&amp;&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;abbc&#39;</span>\n<span class="token comment">// $` 表示匹配结果之前的字符串</span>\n<span class="token comment">// 对于第一个`b`，$` 指代`a`</span>\n<span class="token comment">// 对于第二个`b`，$` 指代`ab`</span>\n<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$`&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;aaabc&#39;</span>\n<span class="token comment">// $&#39; 表示匹配结果之后的字符串</span>\n<span class="token comment">// 对于第一个`b`，$&#39; 指代`bc`</span>\n<span class="token comment">// 对于第二个`b`，$&#39; 指代`c`</span>\n<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;abccc&#39;</span>\n<span class="token comment">// $1 表示正则表达式的第一个组匹配，指代`ab`</span>\n<span class="token comment">// $2 表示正则表达式的第二个组匹配，指代`bc`</span>\n<span class="token string">&#39;abbc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)(bc)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2$1&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;bcab&#39;</span>\n<span class="token comment">// $$ 指代 $</span>\n<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$$&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;a$c&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>replaceAll()的第二个参数可以是函数，该函数的返回值将替换掉第一个参数匹配的文本</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;aabbcc&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;aa__cc&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul>',27),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);