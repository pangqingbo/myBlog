"use strict";(self.webpackChunknew=self.webpackChunknew||[]).push([[820],{7975:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-18345714",path:"/notes/this.html",title:"this(上下文对象)",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"this的不同情况",slug:"this的不同情况",children:[]},{level:2,title:"this绑定优先级",slug:"this绑定优先级",children:[]},{level:2,title:"有意思的this思考题",slug:"有意思的this思考题",children:[]},{level:2,title:"关于new",slug:"关于new",children:[]},{level:2,title:"call、apply、bind",slug:"call、apply、bind",children:[{level:3,title:"call和apply",slug:"call和apply",children:[]},{level:3,title:"bind",slug:"bind",children:[]}]}],filePathRelative:"notes/this.md",git:{updatedTime:1634807468e3,contributors:[{name:"pangqingbo",email:"2362698454@qq.com",commits:1}]}}},4492:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="this-上下文对象" tabindex="-1"><a class="header-anchor" href="#this-上下文对象" aria-hidden="true">#</a> this(上下文对象)</h1><h2 id="this的不同情况" tabindex="-1"><a class="header-anchor" href="#this的不同情况" aria-hidden="true">#</a> this的不同情况</h2><ul><li>如果this以构造函数new的形式调用，this就是新创建的对象 <ul><li>例如：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>如果this以call，apply，bind来调用，this绑定的就是call，apply和bind的第一个参数，也称为显示绑定</li><li>如果this是以方法的形式调用，则调用方法的对象是谁this就是谁，这样的this绑定也叫做隐式绑定</li><li>箭头函数的this在定义的时候就已经决定，由外层代码块决定，且无法修改</li><li>如果不是以上三种情况，也就是函数直接调用，则this是window</li></ul><h2 id="this绑定优先级" tabindex="-1"><a class="header-anchor" href="#this绑定优先级" aria-hidden="true">#</a> this绑定优先级</h2><p>new 绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p><h2 id="有意思的this思考题" tabindex="-1"><a class="header-anchor" href="#有意思的this思考题" aria-hidden="true">#</a> 有意思的this思考题</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nfoo<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n \nfoo<span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ?</span>\n<span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// ?</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// ?</span>\n<span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// ?</span>\n<span class="token keyword">new</span> <span class="token class-name">foo<span class="token punctuation">.</span>getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ?</span>\n<span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// ?</span>\n<span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ?</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>答案：2 4 1 1 2 3 3</p><h2 id="关于new" tabindex="-1"><a class="header-anchor" href="#关于new" aria-hidden="true">#</a> 关于new</h2><p>用new创建构造函数时，js会帮我们完成以下工作：</p><ol><li>创建一个新对象。</li><li>把这个新对象的__proto__属性指向 原函数的prototype属性。(即继承原函数的原型)</li><li>将这个新对象绑定到 此函数的this上 。</li><li>返回新对象，如果这个函数没有返回其他对象。</li></ol><h2 id="call、apply、bind" tabindex="-1"><a class="header-anchor" href="#call、apply、bind" aria-hidden="true">#</a> call、apply、bind</h2><p>call、apply和bind都是为了修改函数的this指向</p><h3 id="call和apply" tabindex="-1"><a class="header-anchor" href="#call和apply" aria-hidden="true">#</a> call和apply</h3><p>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样，直接看例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中 this 是你想指定的上下文对象，他可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里</p><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h3><p>让我们直接来看一个例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> altwrite <span class="token operator">=</span> document<span class="token punctuation">.</span>write<span class="token punctuation">;</span>\n<span class="token function">altwrite</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们如果像上面一样用，结果就会报错：Uncaught TypeError: Illegal invocation altwrite()函数改变this的指向global或window对象，导致执行时提示非法调用异常，正确的方案就是使用bind()方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> altwrite <span class="token operator">=</span> document<span class="token punctuation">.</span>write<span class="token punctuation">;</span>\n<span class="token function">altwrite</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',22),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);